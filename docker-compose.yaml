services:
  mongodb:
    # To create this service, Compose will pull the mongo
    image: mongo:7.0.4
    # a custom name for the MongoDB container
    container_name: mongo
    # Configures the container to restart automatically.
    restart: always
    # Volumes to persist data and initialize MongoDB
    volumes:
      # The named volume dbdata will persist the data stored in Mongo’s default data directory, /data/db.
      # This will ensure that you don’t lose data in cases where you stop or remove containers.
      - dbdata:/data/db

  # only for the local env
  mongo-express:
    # Use the official mongo-express image
    image: mongo-express
    restart: always
    container_name: mongo-express
    env_file: .env
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_AUTH_ADMIN}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_AUTH_PWD}
      ME_CONFIG_BASICAUTH: "true"
      ME_CONFIG_MONGODB_SERVER: mongodb # Service name for MongoDB container
    # Map container port 8081 to host port 8081
    ports:
      - 8081:8081
    depends_on:
      - mongodb # Ensure mongo-express starts after MongoDB is up and running

  # To build task backend image
  api:
    # This defines the configuration options, including the context and dockerfile,
    # that will be applied when Compose builds the application image.
    build:
      # This defines the build context for the image build
      context: ./server
      dockerfile: dockerfile
      args:
        NODE_ENV: production
    # This is the name we’ll use to refer to this image in Docker commands or to push to a Docker registry.
    # image: fullstack_task-api
    container_name: api
    env_file: ./server/.env
    restart: always
    environment:
      MONGO_URI: mongodb://mongo:27017/
      MONGO_DB_HOST: mongo
      TOKEN_ISSUER: api.prod.saini.com
      TOKEN_AUDIENCE: prod.saini.com
      FRONTEND_RESET_URL: http://localhost:3000/
      CORS_URL: http://localhost:3000
    ports:
      - 3001:3001
    depends_on:
      - mongodb

  # To build task frontend image
  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
      args:
        NODE_ENV: production
    # This is the name we’ll use to refer to this image in Docker commands or to push to a Docker registry.
    # image: fullstack_task-frontend
    container_name: frontend
    restart: always
    environment:
      APP_API_BASE_URL: http://localhost:3001/api/v1
    ports:
      - 3000:80
    depends_on:
      - api

# Our top-level volumes key defines the volumes dbdata.
# When Docker creates volumes, the contents of the volume are stored in a part of the host filesystem, /var/lib/docker/volumes/, that’s managed by Docker.
# The contents of each volume are stored in a directory under /var/lib/docker/volumes/ and get mounted to any container that uses the volume.
# In this way, the data that our users will create will persist in the dbdata volume even if we remove and recreate the db container.
volumes:
  dbdata:
