services:
  mongodb:
    # To create this service, Compose will pull the mongo
    image: mongo:7.0.4
    # a custom name for the MongoDB container
    container_name: mongo
    # Configures the container to restart automatically unless it is stopped manually.
    restart: unless-stopped
    # This tells Compose that we would like to add environment variables
    # from a file called .env
    env_file: .env
    # MONGO_INITDB_ROOT_USERNAME and MONGO_INITDB_ROOT_PASSWORD together create
    # a root user and ensure that authentication is enabled when the container starts.
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${DB_ADMIN}
      MONGO_INITDB_ROOT_PASSWORD: ${DB_ADMIN_PWD}
    ports:
      # Map host port ${DB_PORT} to container port 27017
      - ${DB_PORT}:27017
    # Volumes to persist data and initialize MongoDB
    volumes:
      # Mounts a JavaScript file for MongoDB initialization. The :ro flag ensures that the file is mounted as read-only.
      - ./addons/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      # The named volume dbdata will persist the data stored in Mongo’s default data directory, /data/db.
      # This will ensure that you don’t lose data in cases where you stop or remove containers.
      - dbdata:/data/db

  mongo-express:
    # Use the official mongo-express image
    image: mongo-express
    restart: unless-stopped
    container_name: mongo-express
    env_file: .env
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: ${DB_ADMIN}
      ME_CONFIG_MONGODB_ADMINPASSWORD: ${DB_ADMIN_PWD}
      ME_CONFIG_MONGODB_PORT: ${DB_PORT}
      ME_CONFIG_BASICAUTH_USERNAME: ${MONGO_EXPRESS_AUTH_ADMIN}
      ME_CONFIG_BASICAUTH_PASSWORD: ${MONGO_EXPRESS_AUTH_PWD}
      ME_CONFIG_BASICAUTH: "true"
      ME_CONFIG_MONGODB_SERVER: mongodb # Service name for MongoDB container
    # Map container port 8081 to host port 8081
    ports:
      - ${MONGO_EXPRESS_PORT}:8081
    depends_on:
      - mongodb # Ensure mongo-express starts after MongoDB is up and running

  api:
    # This defines the configuration options, including the context and dockerfile,
    # that will be applied when Compose builds the application image.
    build:
      # This defines the build context for the image build
      context: ./server
      dockerfile: dockerfile
      args:
        NODE_ENV: production
    # This is the name we’ll use to refer to this image in Docker commands or to push to a Docker registry.
    image: fullstack_task-api
    container_name: api
    env_file: ./server/.env
    restart: unless-stopped
    environment:
      MONGO_DB_USERNAME: ${DB_USERNAME}
      MONGO_DB_PWD: ${DB_PASSWORD}
      MONGO_DB_PORT: ${DB_PORT}
      MONGO_DB_DATABASE: ${DB_NAME}
    ports: ${PORT}:${PORT}
    depends_on:
      - mongodb

# Our top-level volumes key defines the volumes dbdata.
# When Docker creates volumes, the contents of the volume are stored in a part of the host filesystem, /var/lib/docker/volumes/, that’s managed by Docker.
# The contents of each volume are stored in a directory under /var/lib/docker/volumes/ and get mounted to any container that uses the volume.
# In this way, the data that our users will create will persist in the dbdata volume even if we remove and recreate the db container.
volumes:
  dbdata:
