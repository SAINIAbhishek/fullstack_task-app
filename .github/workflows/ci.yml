name: Fullstack Tasks Application Pipeline

# Trigger the workflow
on:
  push:
    branches:
      - "**" # Matches every branch for push events
  pull_request:
    branches:
      - "**" # Matches every branch for pull request events

jobs:
  # Step: Cache and Install Frontend Dependencies
  frontend-dependencies:
    uses: SAINIAbhishek/shared-workflows/.github/workflows/cache-install-dependencies.yml@main
    with:
      node-version: "20.17.0"
      lock-file: "frontend/package-lock.json"
      cache-path: "frontend/node_modules"
      cache-key-prefix: "frontend-node"

  # # Step: Cache Node.js Modules
  # install-dependencies:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Cache and Install Server Dependencies
  #       uses: SAINIAbhishek/shared-workflows/.github/workflows/cache-install-dependencies.yml@main
  #       with:
  #         node-version: '20.17.0'
  #         lock-file: 'server/package-lock.json'
  #         cache-path: 'server/node_modules'
  #         cache-key-prefix: 'server-node'

  #     - name: Cache and Install Frontend Dependencies
  #       uses: SAINIAbhishek/shared-workflows/.github/workflows/cache-install-dependencies.yml@main
  #       with:
  #         node-version: '20.17.0'
  #         lock-file: 'frontend/package-lock.json'
  #         cache-path: 'frontend/node_modules'
  #         cache-key-prefix: 'frontend-node'

  # # Step: Lint the code
  # lint:
  #   needs: install-dependencies # Wait for dependencies to be installed before linting
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: ./.github/workflows/setup-node.yml

  #     # Restore Server Node.js Modules cache
  #     - name: Restore Server Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: server/node_modules
  #         key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json') }}

  #     # Restore Frontend Node.js Modules cache
  #     - name: Restore Frontend Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}

  #     # Lint the server code
  #     - name: Lint Server Code
  #       run: npm run eslint
  #       working-directory: ./server

  #     # Lint the frontend code
  #     - name: Lint Frontend Code
  #       run: npm run lint
  #       working-directory: ./frontend

  # # Step: Formatting job
  # format:
  #   needs: install-dependencies # Dependencies must be installed before formatting
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: setup-node.yml

  #     # Restore Frontend Node.js Modules cache
  #     - name: Restore Frontend Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}

  #     # Format the frontend code with Prettier
  #     - name: Check Frontend Code Formatting with Prettier
  #       run: npm run prettier
  #       working-directory: ./frontend

  # # Step: Security audit for both server and frontend
  # security-audit:
  #   needs: install-dependencies # Run only after tests have passed
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: ./.github/workflows/setup-node.yml

  #     # Restore Server Node.js Modules cache
  #     - name: Restore Server Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: server/node_modules
  #         key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json') }}

  #     # Restore Frontend Node.js Modules cache
  #     - name: Restore Frontend Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}

  #     # Run npm audit for server
  #     - name: Run Server npm audit
  #       run: npm run audit
  #       working-directory: ./server
  #       continue-on-error: true

  #     # Run npm audit for frontend
  #     - name: Run Frontend npm audit
  #       run: npm run audit
  #       working-directory: ./frontend
  #       continue-on-error: true

  # # Step: Run unit tests
  # test:
  #   needs: [lint, format, security-audit]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: ./.github/workflows/setup-node.yml

  #     # Restore Frontend Node.js Modules cache
  #     - name: Restore Frontend Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}

  #     # Run frontend unit tests
  #     - name: Run Frontend Unit Tests
  #       run: npm run test:coverage
  #       working-directory: ./frontend
  #       env:
  #         CI: true # Ensures Vitest runs in Continuous Integration mode

  # # Step: Build the project
  # build:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout Code
  #       uses: actions/checkout@v3

  #     - name: Setup Node.js
  #       uses: ./.github/workflows/setup-node.yml

  #     # Restore Server Node.js Modules cache
  #     - name: Restore Server Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: server/node_modules
  #         key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json') }}

  #     - name: Build Server for Production
  #       run: npm run build
  #       working-directory: ./server
  #       env:
  #         NODE_ENV: production
  #         PORT: ${{ vars.API_PORT }}
  #         MONGO_URI: ${{ vars.MONGO_URI }}
  #         MONGO_DB_HOST: ${{ vars.MONGO_DB_HOST }}
  #         TOKEN_ISSUER: ${{ vars.TOKEN_ISSUER}}
  #         TOKEN_AUDIENCE: ${{ vars.TOKEN_AUDIENCE}}
  #         CORS_URL: ${{ vars.CORS_URL}}
  #         FRONTEND_RESET_URL: ${{ vars.FRONTEND_RESET_URL}}
  #         API_VERSION: ${{ vars.API_VERSION}}
  #         ACCESS_TOKEN_SECRET_KEY: ${{ secrets.ACCESS_TOKEN_SECRET_KEY}}
  #         MAILTRAP_TESTING_PASSWORD: ${{ secrets.MAILTRAP_TESTING_PASSWORD}}
  #         MAILTRAP_TESTING_USERNAME: ${{ secrets.MAILTRAP_TESTING_USERNAME}}
  #         REFRESH_TOKEN_SECRET_KEY: ${{ secrets.REFRESH_TOKEN_SECRET_KEY}}

  #     # Restore Frontend Node.js Modules cache
  #     - name: Restore Frontend Node.js Modules Cache
  #       uses: actions/cache@v3
  #       with:
  #         path: frontend/node_modules
  #         key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}

  #     - name: Build Frontend for Production
  #       run: npm run build:prod
  #       working-directory: ./frontend
  #       env:
  #         NODE_ENV: production
  #         APP_API_BASE_URL: ${{ vars.APP_API_BASE_URL }}
  #         APP_LOGGING: ${{ vars.APP_LOGGING }}
  #         APP_PORT: ${{ vars.FRONTEND_APP_PORT }}

  #     - name: Save Server Build Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: server-build
  #         path: server/build

  #     - name: Save Frontend Build Artifacts
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: frontend-build
  #         path: frontend/dist
