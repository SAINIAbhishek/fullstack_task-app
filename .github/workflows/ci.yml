name: Fullstack Tasks Application Pipeline

# Trigger the workflow
on:
  push:
    branches:
      - "**" # Matches every branch for push events
  pull_request:
    branches:
      - "**" # Matches every branch for pull request events

jobs:
  # Step 1: Install dependencies
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      # Checkout the code from the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # Set up Node.js environment with a specific version and cache npm modules
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20.17.0" # Specify Node.js version, keep it same as in server/dockerfile
          cache: "npm" # Enable caching of 'node_modules' for faster builds

      # Install dependencies for the server
      - name: Install Server Dependencies
        run: cd server && npm ci # Install exact versions from package-lock.json in server

      # Install dependencies for the frontend
      - name: Install Frontend Dependencies
        run: cd frontend && npm ci # Install exact versions from package-lock.json in frontend

  # Step 2: Cache dependencies
  cache:
    needs: install-dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Cache Server Node.js Modules
        uses: actions/cache@v3
        with:
          path: server/node_modules
          # Unique key to identify the cache
          # This key is based on the hash of the package-lock.json file.
          # If dependencies change, the hash will change and a new cache will be created.
          key: ${{ runner.os }}-server-node-${{ hashFiles('server/package-lock.json') }}
          # Restore keys provide fallback cache options.
          # If the exact key isn't found, the runner will attempt to restore from these fallback keys.
          restore-keys: |
            ${{ runner.os }}-server-node-

      - name: Cache Frontend Node.js Modules
        uses: actions/cache@v3
        with:
          path: frontend/node_modules
          # Unique key to identify the cache
          # This key is based on the hash of the package-lock.json file.
          # If dependencies change, the hash will change and a new cache will be created.
          key: ${{ runner.os }}-frontend-node-${{ hashFiles('frontend/package-lock.json') }}
          # Restore keys provide fallback cache options.
          # If the exact key isn't found, the runner will attempt to restore from these fallback keys.
          restore-keys: |
            ${{ runner.os }}-frontend-node-

  # Step 3: Lint the code
  lint:
    needs: install-dependencies # Wait for dependencies to be installed before linting
    runs-on: ubuntu-latest
    steps:
      # Checkout the code again to ensure a fresh working directory
      - name: Checkout Code
        uses: actions/checkout@v3

      # Lint the server code
      - name: Lint Server Code
        run: cd server && npm run eslint # Lint the server directory

      # Lint the frontend code
      - name: Lint Frontend Code
        run: cd frontend && npm run lint # Lint the frontend directory

  # Step 4: Formatting job
  format:
    needs: install-dependencies # Dependencies must be installed before formatting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      # Format the frontend code with Prettier
      - name: Check Frontend Code Formatting with Prettier
        run: cd frontend && npm run prettier:check

  # Step 5: Security audit for both server and frontend
  security-audit:
    needs: install-dependencies # Run only after tests have passed
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Run npm audit for server
      - name: Run Server npm audit
        run: cd server && npm audit

      # Run npm audit for frontend
      - name: Run Frontend npm audit
        run: cd frontend && npm audit

  # Step 6: Run unit tests
  test:
    needs: [lint, format, security-audit]
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Run frontend unit tests
      - name: Run Frontend Unit Tests
        run: cd frontend && npm run test:coverage
        env:
          CI: true # Ensures Vitest runs in Continuous Integration mode

  # Step 7: Build the project
  build:
    needs: test
    runs-on: ubuntu-latest
    steps:
      # Checkout the code
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Build Server for Production
        run: cd server && npm run build
        env:
          NODE_ENV: production

      - name: Build Frontend for Production
        run: cd frontend && npm run build:prod
        env:
          NODE_ENV: production

      - name: Save Server Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: server-build
          path: server/build

      - name: Save Frontend Build Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/build
